# using ubuntu 20 docker image
FROM ubuntu:focal

ARG DEBIAN_FRONTEND=noninteractive
ARG SHFMT_URL=https://github.com/mvdan/sh/releases/download/v3.2.4/shfmt_v3.2.4_linux_amd64
ARG WASI_SDK_URL=https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk_12.0_amd64.deb

# Use bash, not sh
SHELL ["/bin/bash", "-c"]

# We run the dev container interactively, so unminimize and install missing packages
RUN apt-get update && apt-get install -y --no-install-recommends \
	apt-utils \
	man-db \
	&& yes | unminimize

# General GCC C/C++ Build toolchain
# pkg-config, libtool - used by PocketSphinx
# cmake - used by cmsis
RUN apt-get update && apt-get install -y --no-install-recommends \
	automake \
	build-essential \
	binutils-dev \
	cmake \
	git \
	gdb \
	libtinfo5 \
	libtool \
	make \
	pkg-config

# Needed to install from http endpoints via curl or wget
RUN apt-get update && apt-get install -y --no-install-recommends \
	ca-certificates \
	curl \
	gpg-agent \
	hey \
	httpie \
	libssl-dev \
	lsb-release \
	openssh-client \
	software-properties-common \
	wget

# Test Script Stuff
RUN apt-get update && apt-get install -y --no-install-recommends \
	bc \
	bsdmainutils \
	fonts-dejavu \
	fonts-cascadia-code \
	fonts-roboto \
	gnuplot \
	imagemagick \
	jq \
	libz3-4 \
	netpbm \
	pango1.0-tools \
	shellcheck \
	wamerican

# Interactive Tools
RUN apt-get update && apt-get install -y --no-install-recommends \
	gdb \
	less \
	strace \
	valgrind \
	vim \
	wabt

# shfmt is a formatter for shell scripts
RUN wget $SHFMT_URL -O shfmt && chmod +x shfmt && mv shfmt /usr/local/bin/shfmt

ENV LLVM_VERSION=12
ADD install_llvm.sh /sledge/install_llvm.sh
RUN ./sledge/install_llvm.sh $LLVM_VERSION

# WASI-SDK
RUN curl -sS -L -O $WASI_SDK_URL && dpkg -i wasi-sdk_12.0_amd64.deb && rm -f wasi-sdk_12.0_amd64.deb
ENV WASI_SDK=/opt/wasi-sdk

# Create non-root user and add to sudoers
ARG USERNAME=dev
ARG USER_UID=1000
ARG USER_GID=$USER_UID
RUN groupadd --gid $USER_GID $USERNAME
RUN useradd --uid $USER_UID --gid $USER_GID -m $USERNAME
RUN apt-get update && apt-get install -y sudo
RUN echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME
RUN chmod 0440 /etc/sudoers.d/$USERNAME

# Make non-root user default user and use for rest of Dockerfile
USER $USER_UID

# Make sure the mount point and installation target and any files therein are owned by the non-root user
RUN sudo chown $USER_GID:$USER_GID /sledge
ADD fix_root.sh /sledge/fix_root.sh
RUN cd sledge && ./fix_root.sh

################################
# Final Setup as non-root user #
################################

# Rust
# Rustup does not cleanly support system installs, so install as non-root user
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable --component rustfmt --target wasm32-wasi -y
ENV PATH=/home/dev/.cargo/bin:$PATH
RUN cargo install --debug cargo-audit cargo-watch rsign2

# We need to set the locale for pango-view
ENV LANG C.UTF-8
ENV LANGUAGE C.UTF-8
ENV LC_ALL C.UTF-8
